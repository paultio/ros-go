// Code generated by rclgo-gen. DO NOT EDIT.

package geographic_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geographic_msgs/msg/geo_pose_with_covariance.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("geographic_msgs/GeoPoseWithCovariance", GeoPoseWithCovarianceTypeSupport)
	typemap.RegisterMessage("geographic_msgs/msg/GeoPoseWithCovariance", GeoPoseWithCovarianceTypeSupport)
}

type GeoPoseWithCovariance struct {
	Pose GeoPose `yaml:"pose"`
	Covariance [36]float64 `yaml:"covariance"`// Row-major representation of the 6x6 covariance matrixThe orientation parameters use a fixed-axis representation.In order, the parameters are:(Lat, Lon, Alt, rotation about E (East) axis, rotation about N (North) axis, rotation about U (Up) axis)
}

// NewGeoPoseWithCovariance creates a new GeoPoseWithCovariance with default values.
func NewGeoPoseWithCovariance() *GeoPoseWithCovariance {
	self := GeoPoseWithCovariance{}
	self.SetDefaults()
	return &self
}

func (t *GeoPoseWithCovariance) Clone() *GeoPoseWithCovariance {
	c := &GeoPoseWithCovariance{}
	c.Pose = *t.Pose.Clone()
	c.Covariance = t.Covariance
	return c
}

func (t *GeoPoseWithCovariance) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GeoPoseWithCovariance) SetDefaults() {
	t.Pose.SetDefaults()
	t.Covariance = [36]float64{}
}

func (t *GeoPoseWithCovariance) GetTypeSupport() types.MessageTypeSupport {
	return GeoPoseWithCovarianceTypeSupport
}

// GeoPoseWithCovariancePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GeoPoseWithCovariancePublisher struct {
	*rclgo.Publisher
}

// NewGeoPoseWithCovariancePublisher creates and returns a new publisher for the
// GeoPoseWithCovariance
func NewGeoPoseWithCovariancePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GeoPoseWithCovariancePublisher, error) {
	pub, err := node.NewPublisher(topic_name, GeoPoseWithCovarianceTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GeoPoseWithCovariancePublisher{pub}, nil
}

func (p *GeoPoseWithCovariancePublisher) Publish(msg *GeoPoseWithCovariance) error {
	return p.Publisher.Publish(msg)
}

// GeoPoseWithCovarianceSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GeoPoseWithCovarianceSubscription struct {
	*rclgo.Subscription
}

// GeoPoseWithCovarianceSubscriptionCallback type is used to provide a subscription
// handler function for a GeoPoseWithCovarianceSubscription.
type GeoPoseWithCovarianceSubscriptionCallback func(msg *GeoPoseWithCovariance, info *rclgo.MessageInfo, err error)

// NewGeoPoseWithCovarianceSubscription creates and returns a new subscription for the
// GeoPoseWithCovariance
func NewGeoPoseWithCovarianceSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GeoPoseWithCovarianceSubscriptionCallback) (*GeoPoseWithCovarianceSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GeoPoseWithCovariance
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GeoPoseWithCovarianceTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GeoPoseWithCovarianceSubscription{sub}, nil
}

func (s *GeoPoseWithCovarianceSubscription) TakeMessage(out *GeoPoseWithCovariance) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGeoPoseWithCovarianceSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGeoPoseWithCovarianceSlice(dst, src []GeoPoseWithCovariance) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GeoPoseWithCovarianceTypeSupport types.MessageTypeSupport = _GeoPoseWithCovarianceTypeSupport{}

type _GeoPoseWithCovarianceTypeSupport struct{}

func (t _GeoPoseWithCovarianceTypeSupport) New() types.Message {
	return NewGeoPoseWithCovariance()
}

func (t _GeoPoseWithCovarianceTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.geographic_msgs__msg__GeoPoseWithCovariance
	return (unsafe.Pointer)(C.geographic_msgs__msg__GeoPoseWithCovariance__create())
}

func (t _GeoPoseWithCovarianceTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geographic_msgs__msg__GeoPoseWithCovariance__destroy((*C.geographic_msgs__msg__GeoPoseWithCovariance)(pointer_to_free))
}

func (t _GeoPoseWithCovarianceTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GeoPoseWithCovariance)
	mem := (*C.geographic_msgs__msg__GeoPoseWithCovariance)(dst)
	GeoPoseTypeSupport.AsCStruct(unsafe.Pointer(&mem.pose), &m.Pose)
	cSlice_covariance := mem.covariance[:]
	primitives.Float64__Array_to_C(*(*[]primitives.CFloat64)(unsafe.Pointer(&cSlice_covariance)), m.Covariance[:])
}

func (t _GeoPoseWithCovarianceTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GeoPoseWithCovariance)
	mem := (*C.geographic_msgs__msg__GeoPoseWithCovariance)(ros2_message_buffer)
	GeoPoseTypeSupport.AsGoStruct(&m.Pose, unsafe.Pointer(&mem.pose))
	cSlice_covariance := mem.covariance[:]
	primitives.Float64__Array_to_Go(m.Covariance[:], *(*[]primitives.CFloat64)(unsafe.Pointer(&cSlice_covariance)))
}

func (t _GeoPoseWithCovarianceTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geographic_msgs__msg__GeoPoseWithCovariance())
}

type CGeoPoseWithCovariance = C.geographic_msgs__msg__GeoPoseWithCovariance
type CGeoPoseWithCovariance__Sequence = C.geographic_msgs__msg__GeoPoseWithCovariance__Sequence

func GeoPoseWithCovariance__Sequence_to_Go(goSlice *[]GeoPoseWithCovariance, cSlice CGeoPoseWithCovariance__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GeoPoseWithCovariance, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GeoPoseWithCovarianceTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GeoPoseWithCovariance__Sequence_to_C(cSlice *CGeoPoseWithCovariance__Sequence, goSlice []GeoPoseWithCovariance) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.geographic_msgs__msg__GeoPoseWithCovariance)(C.malloc(C.sizeof_struct_geographic_msgs__msg__GeoPoseWithCovariance * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GeoPoseWithCovarianceTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GeoPoseWithCovariance__Array_to_Go(goSlice []GeoPoseWithCovariance, cSlice []CGeoPoseWithCovariance) {
	for i := 0; i < len(cSlice); i++ {
		GeoPoseWithCovarianceTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GeoPoseWithCovariance__Array_to_C(cSlice []CGeoPoseWithCovariance, goSlice []GeoPoseWithCovariance) {
	for i := 0; i < len(goSlice); i++ {
		GeoPoseWithCovarianceTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
