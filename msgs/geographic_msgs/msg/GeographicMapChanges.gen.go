// Code generated by rclgo-gen. DO NOT EDIT.

package geographic_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "paultio/ros-go/msgs/std_msgs/msg"
	unique_identifier_msgs_msg "paultio/ros-go/msgs/unique_identifier_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geographic_msgs/msg/geographic_map_changes.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("geographic_msgs/GeographicMapChanges", GeographicMapChangesTypeSupport)
	typemap.RegisterMessage("geographic_msgs/msg/GeographicMapChanges", GeographicMapChangesTypeSupport)
}

type GeographicMapChanges struct {
	Header std_msgs_msg.Header `yaml:"header"`// stamp specifies time of change
	Diffs GeographicMap `yaml:"diffs"`// new and changed points and features
	Deletes []unique_identifier_msgs_msg.UUID `yaml:"deletes"`// deleted map components
}

// NewGeographicMapChanges creates a new GeographicMapChanges with default values.
func NewGeographicMapChanges() *GeographicMapChanges {
	self := GeographicMapChanges{}
	self.SetDefaults()
	return &self
}

func (t *GeographicMapChanges) Clone() *GeographicMapChanges {
	c := &GeographicMapChanges{}
	c.Header = *t.Header.Clone()
	c.Diffs = *t.Diffs.Clone()
	if t.Deletes != nil {
		c.Deletes = make([]unique_identifier_msgs_msg.UUID, len(t.Deletes))
		unique_identifier_msgs_msg.CloneUUIDSlice(c.Deletes, t.Deletes)
	}
	return c
}

func (t *GeographicMapChanges) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GeographicMapChanges) SetDefaults() {
	t.Header.SetDefaults()
	t.Diffs.SetDefaults()
	t.Deletes = nil
}

func (t *GeographicMapChanges) GetTypeSupport() types.MessageTypeSupport {
	return GeographicMapChangesTypeSupport
}

// GeographicMapChangesPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GeographicMapChangesPublisher struct {
	*rclgo.Publisher
}

// NewGeographicMapChangesPublisher creates and returns a new publisher for the
// GeographicMapChanges
func NewGeographicMapChangesPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GeographicMapChangesPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GeographicMapChangesTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GeographicMapChangesPublisher{pub}, nil
}

func (p *GeographicMapChangesPublisher) Publish(msg *GeographicMapChanges) error {
	return p.Publisher.Publish(msg)
}

// GeographicMapChangesSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GeographicMapChangesSubscription struct {
	*rclgo.Subscription
}

// GeographicMapChangesSubscriptionCallback type is used to provide a subscription
// handler function for a GeographicMapChangesSubscription.
type GeographicMapChangesSubscriptionCallback func(msg *GeographicMapChanges, info *rclgo.MessageInfo, err error)

// NewGeographicMapChangesSubscription creates and returns a new subscription for the
// GeographicMapChanges
func NewGeographicMapChangesSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GeographicMapChangesSubscriptionCallback) (*GeographicMapChangesSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GeographicMapChanges
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GeographicMapChangesTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GeographicMapChangesSubscription{sub}, nil
}

func (s *GeographicMapChangesSubscription) TakeMessage(out *GeographicMapChanges) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGeographicMapChangesSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGeographicMapChangesSlice(dst, src []GeographicMapChanges) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GeographicMapChangesTypeSupport types.MessageTypeSupport = _GeographicMapChangesTypeSupport{}

type _GeographicMapChangesTypeSupport struct{}

func (t _GeographicMapChangesTypeSupport) New() types.Message {
	return NewGeographicMapChanges()
}

func (t _GeographicMapChangesTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.geographic_msgs__msg__GeographicMapChanges
	return (unsafe.Pointer)(C.geographic_msgs__msg__GeographicMapChanges__create())
}

func (t _GeographicMapChangesTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geographic_msgs__msg__GeographicMapChanges__destroy((*C.geographic_msgs__msg__GeographicMapChanges)(pointer_to_free))
}

func (t _GeographicMapChangesTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GeographicMapChanges)
	mem := (*C.geographic_msgs__msg__GeographicMapChanges)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	GeographicMapTypeSupport.AsCStruct(unsafe.Pointer(&mem.diffs), &m.Diffs)
	unique_identifier_msgs_msg.UUID__Sequence_to_C((*unique_identifier_msgs_msg.CUUID__Sequence)(unsafe.Pointer(&mem.deletes)), m.Deletes)
}

func (t _GeographicMapChangesTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GeographicMapChanges)
	mem := (*C.geographic_msgs__msg__GeographicMapChanges)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	GeographicMapTypeSupport.AsGoStruct(&m.Diffs, unsafe.Pointer(&mem.diffs))
	unique_identifier_msgs_msg.UUID__Sequence_to_Go(&m.Deletes, *(*unique_identifier_msgs_msg.CUUID__Sequence)(unsafe.Pointer(&mem.deletes)))
}

func (t _GeographicMapChangesTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geographic_msgs__msg__GeographicMapChanges())
}

type CGeographicMapChanges = C.geographic_msgs__msg__GeographicMapChanges
type CGeographicMapChanges__Sequence = C.geographic_msgs__msg__GeographicMapChanges__Sequence

func GeographicMapChanges__Sequence_to_Go(goSlice *[]GeographicMapChanges, cSlice CGeographicMapChanges__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GeographicMapChanges, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GeographicMapChangesTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GeographicMapChanges__Sequence_to_C(cSlice *CGeographicMapChanges__Sequence, goSlice []GeographicMapChanges) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.geographic_msgs__msg__GeographicMapChanges)(C.malloc(C.sizeof_struct_geographic_msgs__msg__GeographicMapChanges * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GeographicMapChangesTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GeographicMapChanges__Array_to_Go(goSlice []GeographicMapChanges, cSlice []CGeographicMapChanges) {
	for i := 0; i < len(cSlice); i++ {
		GeographicMapChangesTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GeographicMapChanges__Array_to_C(cSlice []CGeographicMapChanges, goSlice []GeographicMapChanges) {
	for i := 0; i < len(goSlice); i++ {
		GeographicMapChangesTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
