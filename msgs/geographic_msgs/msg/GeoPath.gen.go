// Code generated by rclgo-gen. DO NOT EDIT.

package geographic_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "paultio/ros-go/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geographic_msgs/msg/geo_path.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("geographic_msgs/GeoPath", GeoPathTypeSupport)
	typemap.RegisterMessage("geographic_msgs/msg/GeoPath", GeoPathTypeSupport)
}

type GeoPath struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Poses []GeoPoseStamped `yaml:"poses"`
}

// NewGeoPath creates a new GeoPath with default values.
func NewGeoPath() *GeoPath {
	self := GeoPath{}
	self.SetDefaults()
	return &self
}

func (t *GeoPath) Clone() *GeoPath {
	c := &GeoPath{}
	c.Header = *t.Header.Clone()
	if t.Poses != nil {
		c.Poses = make([]GeoPoseStamped, len(t.Poses))
		CloneGeoPoseStampedSlice(c.Poses, t.Poses)
	}
	return c
}

func (t *GeoPath) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GeoPath) SetDefaults() {
	t.Header.SetDefaults()
	t.Poses = nil
}

func (t *GeoPath) GetTypeSupport() types.MessageTypeSupport {
	return GeoPathTypeSupport
}

// GeoPathPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GeoPathPublisher struct {
	*rclgo.Publisher
}

// NewGeoPathPublisher creates and returns a new publisher for the
// GeoPath
func NewGeoPathPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GeoPathPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GeoPathTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GeoPathPublisher{pub}, nil
}

func (p *GeoPathPublisher) Publish(msg *GeoPath) error {
	return p.Publisher.Publish(msg)
}

// GeoPathSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GeoPathSubscription struct {
	*rclgo.Subscription
}

// GeoPathSubscriptionCallback type is used to provide a subscription
// handler function for a GeoPathSubscription.
type GeoPathSubscriptionCallback func(msg *GeoPath, info *rclgo.MessageInfo, err error)

// NewGeoPathSubscription creates and returns a new subscription for the
// GeoPath
func NewGeoPathSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GeoPathSubscriptionCallback) (*GeoPathSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GeoPath
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GeoPathTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GeoPathSubscription{sub}, nil
}

func (s *GeoPathSubscription) TakeMessage(out *GeoPath) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGeoPathSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGeoPathSlice(dst, src []GeoPath) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GeoPathTypeSupport types.MessageTypeSupport = _GeoPathTypeSupport{}

type _GeoPathTypeSupport struct{}

func (t _GeoPathTypeSupport) New() types.Message {
	return NewGeoPath()
}

func (t _GeoPathTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.geographic_msgs__msg__GeoPath
	return (unsafe.Pointer)(C.geographic_msgs__msg__GeoPath__create())
}

func (t _GeoPathTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geographic_msgs__msg__GeoPath__destroy((*C.geographic_msgs__msg__GeoPath)(pointer_to_free))
}

func (t _GeoPathTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GeoPath)
	mem := (*C.geographic_msgs__msg__GeoPath)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	GeoPoseStamped__Sequence_to_C(&mem.poses, m.Poses)
}

func (t _GeoPathTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GeoPath)
	mem := (*C.geographic_msgs__msg__GeoPath)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	GeoPoseStamped__Sequence_to_Go(&m.Poses, mem.poses)
}

func (t _GeoPathTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geographic_msgs__msg__GeoPath())
}

type CGeoPath = C.geographic_msgs__msg__GeoPath
type CGeoPath__Sequence = C.geographic_msgs__msg__GeoPath__Sequence

func GeoPath__Sequence_to_Go(goSlice *[]GeoPath, cSlice CGeoPath__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GeoPath, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GeoPathTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GeoPath__Sequence_to_C(cSlice *CGeoPath__Sequence, goSlice []GeoPath) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.geographic_msgs__msg__GeoPath)(C.malloc(C.sizeof_struct_geographic_msgs__msg__GeoPath * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GeoPathTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GeoPath__Array_to_Go(goSlice []GeoPath, cSlice []CGeoPath) {
	for i := 0; i < len(cSlice); i++ {
		GeoPathTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GeoPath__Array_to_C(cSlice []CGeoPath, goSlice []GeoPath) {
	for i := 0; i < len(goSlice); i++ {
		GeoPathTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
