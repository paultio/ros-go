// Code generated by rclgo-gen. DO NOT EDIT.

package geographic_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geographic_msgs/msg/geo_point.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("geographic_msgs/GeoPoint", GeoPointTypeSupport)
	typemap.RegisterMessage("geographic_msgs/msg/GeoPoint", GeoPointTypeSupport)
}

type GeoPoint struct {
	Latitude float64 `yaml:"latitude"`// Latitude [degrees]. Positive is north of equator; negative is south(-90.0 <= latitude <= +90.0).
	Longitude float64 `yaml:"longitude"`// Longitude [degrees]. Positive is east of prime meridian; negative iswest (-180.0 <= longitude <= +180.0). At the poles, latitude is -90.0 or+90.0, and longitude is irrelevant, but must be in range.
	Altitude float64 `yaml:"altitude"`// Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified).
}

// NewGeoPoint creates a new GeoPoint with default values.
func NewGeoPoint() *GeoPoint {
	self := GeoPoint{}
	self.SetDefaults()
	return &self
}

func (t *GeoPoint) Clone() *GeoPoint {
	c := &GeoPoint{}
	c.Latitude = t.Latitude
	c.Longitude = t.Longitude
	c.Altitude = t.Altitude
	return c
}

func (t *GeoPoint) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GeoPoint) SetDefaults() {
	t.Latitude = 0
	t.Longitude = 0
	t.Altitude = 0
}

func (t *GeoPoint) GetTypeSupport() types.MessageTypeSupport {
	return GeoPointTypeSupport
}

// GeoPointPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GeoPointPublisher struct {
	*rclgo.Publisher
}

// NewGeoPointPublisher creates and returns a new publisher for the
// GeoPoint
func NewGeoPointPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GeoPointPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GeoPointTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GeoPointPublisher{pub}, nil
}

func (p *GeoPointPublisher) Publish(msg *GeoPoint) error {
	return p.Publisher.Publish(msg)
}

// GeoPointSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GeoPointSubscription struct {
	*rclgo.Subscription
}

// GeoPointSubscriptionCallback type is used to provide a subscription
// handler function for a GeoPointSubscription.
type GeoPointSubscriptionCallback func(msg *GeoPoint, info *rclgo.MessageInfo, err error)

// NewGeoPointSubscription creates and returns a new subscription for the
// GeoPoint
func NewGeoPointSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GeoPointSubscriptionCallback) (*GeoPointSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GeoPoint
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GeoPointTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GeoPointSubscription{sub}, nil
}

func (s *GeoPointSubscription) TakeMessage(out *GeoPoint) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGeoPointSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGeoPointSlice(dst, src []GeoPoint) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GeoPointTypeSupport types.MessageTypeSupport = _GeoPointTypeSupport{}

type _GeoPointTypeSupport struct{}

func (t _GeoPointTypeSupport) New() types.Message {
	return NewGeoPoint()
}

func (t _GeoPointTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.geographic_msgs__msg__GeoPoint
	return (unsafe.Pointer)(C.geographic_msgs__msg__GeoPoint__create())
}

func (t _GeoPointTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geographic_msgs__msg__GeoPoint__destroy((*C.geographic_msgs__msg__GeoPoint)(pointer_to_free))
}

func (t _GeoPointTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GeoPoint)
	mem := (*C.geographic_msgs__msg__GeoPoint)(dst)
	mem.latitude = C.double(m.Latitude)
	mem.longitude = C.double(m.Longitude)
	mem.altitude = C.double(m.Altitude)
}

func (t _GeoPointTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GeoPoint)
	mem := (*C.geographic_msgs__msg__GeoPoint)(ros2_message_buffer)
	m.Latitude = float64(mem.latitude)
	m.Longitude = float64(mem.longitude)
	m.Altitude = float64(mem.altitude)
}

func (t _GeoPointTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geographic_msgs__msg__GeoPoint())
}

type CGeoPoint = C.geographic_msgs__msg__GeoPoint
type CGeoPoint__Sequence = C.geographic_msgs__msg__GeoPoint__Sequence

func GeoPoint__Sequence_to_Go(goSlice *[]GeoPoint, cSlice CGeoPoint__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GeoPoint, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GeoPointTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GeoPoint__Sequence_to_C(cSlice *CGeoPoint__Sequence, goSlice []GeoPoint) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.geographic_msgs__msg__GeoPoint)(C.malloc(C.sizeof_struct_geographic_msgs__msg__GeoPoint * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GeoPointTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GeoPoint__Array_to_Go(goSlice []GeoPoint, cSlice []CGeoPoint) {
	for i := 0; i < len(cSlice); i++ {
		GeoPointTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GeoPoint__Array_to_C(cSlice []CGeoPoint, goSlice []GeoPoint) {
	for i := 0; i < len(goSlice); i++ {
		GeoPointTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
