// Code generated by rclgo-gen. DO NOT EDIT.

package geographic_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	unique_identifier_msgs_msg "paultio/ros-go/msgs/unique_identifier_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geographic_msgs/msg/route_segment.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("geographic_msgs/RouteSegment", RouteSegmentTypeSupport)
	typemap.RegisterMessage("geographic_msgs/msg/RouteSegment", RouteSegmentTypeSupport)
}

type RouteSegment struct {
	Id unique_identifier_msgs_msg.UUID `yaml:"id"`// Unique identifier for this segment
	Start unique_identifier_msgs_msg.UUID `yaml:"start"`// beginning way point of segment
	End unique_identifier_msgs_msg.UUID `yaml:"end"`// ending way point of segment
	Props []KeyValue `yaml:"props"`// segment properties
}

// NewRouteSegment creates a new RouteSegment with default values.
func NewRouteSegment() *RouteSegment {
	self := RouteSegment{}
	self.SetDefaults()
	return &self
}

func (t *RouteSegment) Clone() *RouteSegment {
	c := &RouteSegment{}
	c.Id = *t.Id.Clone()
	c.Start = *t.Start.Clone()
	c.End = *t.End.Clone()
	if t.Props != nil {
		c.Props = make([]KeyValue, len(t.Props))
		CloneKeyValueSlice(c.Props, t.Props)
	}
	return c
}

func (t *RouteSegment) CloneMsg() types.Message {
	return t.Clone()
}

func (t *RouteSegment) SetDefaults() {
	t.Id.SetDefaults()
	t.Start.SetDefaults()
	t.End.SetDefaults()
	t.Props = nil
}

func (t *RouteSegment) GetTypeSupport() types.MessageTypeSupport {
	return RouteSegmentTypeSupport
}

// RouteSegmentPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type RouteSegmentPublisher struct {
	*rclgo.Publisher
}

// NewRouteSegmentPublisher creates and returns a new publisher for the
// RouteSegment
func NewRouteSegmentPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*RouteSegmentPublisher, error) {
	pub, err := node.NewPublisher(topic_name, RouteSegmentTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &RouteSegmentPublisher{pub}, nil
}

func (p *RouteSegmentPublisher) Publish(msg *RouteSegment) error {
	return p.Publisher.Publish(msg)
}

// RouteSegmentSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type RouteSegmentSubscription struct {
	*rclgo.Subscription
}

// RouteSegmentSubscriptionCallback type is used to provide a subscription
// handler function for a RouteSegmentSubscription.
type RouteSegmentSubscriptionCallback func(msg *RouteSegment, info *rclgo.MessageInfo, err error)

// NewRouteSegmentSubscription creates and returns a new subscription for the
// RouteSegment
func NewRouteSegmentSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback RouteSegmentSubscriptionCallback) (*RouteSegmentSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg RouteSegment
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, RouteSegmentTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &RouteSegmentSubscription{sub}, nil
}

func (s *RouteSegmentSubscription) TakeMessage(out *RouteSegment) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneRouteSegmentSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneRouteSegmentSlice(dst, src []RouteSegment) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var RouteSegmentTypeSupport types.MessageTypeSupport = _RouteSegmentTypeSupport{}

type _RouteSegmentTypeSupport struct{}

func (t _RouteSegmentTypeSupport) New() types.Message {
	return NewRouteSegment()
}

func (t _RouteSegmentTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.geographic_msgs__msg__RouteSegment
	return (unsafe.Pointer)(C.geographic_msgs__msg__RouteSegment__create())
}

func (t _RouteSegmentTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geographic_msgs__msg__RouteSegment__destroy((*C.geographic_msgs__msg__RouteSegment)(pointer_to_free))
}

func (t _RouteSegmentTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*RouteSegment)
	mem := (*C.geographic_msgs__msg__RouteSegment)(dst)
	unique_identifier_msgs_msg.UUIDTypeSupport.AsCStruct(unsafe.Pointer(&mem.id), &m.Id)
	unique_identifier_msgs_msg.UUIDTypeSupport.AsCStruct(unsafe.Pointer(&mem.start), &m.Start)
	unique_identifier_msgs_msg.UUIDTypeSupport.AsCStruct(unsafe.Pointer(&mem.end), &m.End)
	KeyValue__Sequence_to_C(&mem.props, m.Props)
}

func (t _RouteSegmentTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*RouteSegment)
	mem := (*C.geographic_msgs__msg__RouteSegment)(ros2_message_buffer)
	unique_identifier_msgs_msg.UUIDTypeSupport.AsGoStruct(&m.Id, unsafe.Pointer(&mem.id))
	unique_identifier_msgs_msg.UUIDTypeSupport.AsGoStruct(&m.Start, unsafe.Pointer(&mem.start))
	unique_identifier_msgs_msg.UUIDTypeSupport.AsGoStruct(&m.End, unsafe.Pointer(&mem.end))
	KeyValue__Sequence_to_Go(&m.Props, mem.props)
}

func (t _RouteSegmentTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geographic_msgs__msg__RouteSegment())
}

type CRouteSegment = C.geographic_msgs__msg__RouteSegment
type CRouteSegment__Sequence = C.geographic_msgs__msg__RouteSegment__Sequence

func RouteSegment__Sequence_to_Go(goSlice *[]RouteSegment, cSlice CRouteSegment__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]RouteSegment, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		RouteSegmentTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func RouteSegment__Sequence_to_C(cSlice *CRouteSegment__Sequence, goSlice []RouteSegment) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.geographic_msgs__msg__RouteSegment)(C.malloc(C.sizeof_struct_geographic_msgs__msg__RouteSegment * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		RouteSegmentTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func RouteSegment__Array_to_Go(goSlice []RouteSegment, cSlice []CRouteSegment) {
	for i := 0; i < len(cSlice); i++ {
		RouteSegmentTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func RouteSegment__Array_to_C(cSlice []CRouteSegment, goSlice []RouteSegment) {
	for i := 0; i < len(goSlice); i++ {
		RouteSegmentTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
