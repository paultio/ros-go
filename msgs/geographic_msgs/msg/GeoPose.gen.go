// Code generated by rclgo-gen. DO NOT EDIT.

package geographic_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	geometry_msgs_msg "paultio/ros-go/msgs/geometry_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geographic_msgs/msg/geo_pose.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("geographic_msgs/GeoPose", GeoPoseTypeSupport)
	typemap.RegisterMessage("geographic_msgs/msg/GeoPose", GeoPoseTypeSupport)
}

type GeoPose struct {
	Position GeoPoint `yaml:"position"`
	Orientation geometry_msgs_msg.Quaternion `yaml:"orientation"`
}

// NewGeoPose creates a new GeoPose with default values.
func NewGeoPose() *GeoPose {
	self := GeoPose{}
	self.SetDefaults()
	return &self
}

func (t *GeoPose) Clone() *GeoPose {
	c := &GeoPose{}
	c.Position = *t.Position.Clone()
	c.Orientation = *t.Orientation.Clone()
	return c
}

func (t *GeoPose) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GeoPose) SetDefaults() {
	t.Position.SetDefaults()
	t.Orientation.SetDefaults()
}

func (t *GeoPose) GetTypeSupport() types.MessageTypeSupport {
	return GeoPoseTypeSupport
}

// GeoPosePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GeoPosePublisher struct {
	*rclgo.Publisher
}

// NewGeoPosePublisher creates and returns a new publisher for the
// GeoPose
func NewGeoPosePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GeoPosePublisher, error) {
	pub, err := node.NewPublisher(topic_name, GeoPoseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GeoPosePublisher{pub}, nil
}

func (p *GeoPosePublisher) Publish(msg *GeoPose) error {
	return p.Publisher.Publish(msg)
}

// GeoPoseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GeoPoseSubscription struct {
	*rclgo.Subscription
}

// GeoPoseSubscriptionCallback type is used to provide a subscription
// handler function for a GeoPoseSubscription.
type GeoPoseSubscriptionCallback func(msg *GeoPose, info *rclgo.MessageInfo, err error)

// NewGeoPoseSubscription creates and returns a new subscription for the
// GeoPose
func NewGeoPoseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GeoPoseSubscriptionCallback) (*GeoPoseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GeoPose
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GeoPoseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GeoPoseSubscription{sub}, nil
}

func (s *GeoPoseSubscription) TakeMessage(out *GeoPose) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGeoPoseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGeoPoseSlice(dst, src []GeoPose) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GeoPoseTypeSupport types.MessageTypeSupport = _GeoPoseTypeSupport{}

type _GeoPoseTypeSupport struct{}

func (t _GeoPoseTypeSupport) New() types.Message {
	return NewGeoPose()
}

func (t _GeoPoseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.geographic_msgs__msg__GeoPose
	return (unsafe.Pointer)(C.geographic_msgs__msg__GeoPose__create())
}

func (t _GeoPoseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geographic_msgs__msg__GeoPose__destroy((*C.geographic_msgs__msg__GeoPose)(pointer_to_free))
}

func (t _GeoPoseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GeoPose)
	mem := (*C.geographic_msgs__msg__GeoPose)(dst)
	GeoPointTypeSupport.AsCStruct(unsafe.Pointer(&mem.position), &m.Position)
	geometry_msgs_msg.QuaternionTypeSupport.AsCStruct(unsafe.Pointer(&mem.orientation), &m.Orientation)
}

func (t _GeoPoseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GeoPose)
	mem := (*C.geographic_msgs__msg__GeoPose)(ros2_message_buffer)
	GeoPointTypeSupport.AsGoStruct(&m.Position, unsafe.Pointer(&mem.position))
	geometry_msgs_msg.QuaternionTypeSupport.AsGoStruct(&m.Orientation, unsafe.Pointer(&mem.orientation))
}

func (t _GeoPoseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geographic_msgs__msg__GeoPose())
}

type CGeoPose = C.geographic_msgs__msg__GeoPose
type CGeoPose__Sequence = C.geographic_msgs__msg__GeoPose__Sequence

func GeoPose__Sequence_to_Go(goSlice *[]GeoPose, cSlice CGeoPose__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GeoPose, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GeoPoseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GeoPose__Sequence_to_C(cSlice *CGeoPose__Sequence, goSlice []GeoPose) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.geographic_msgs__msg__GeoPose)(C.malloc(C.sizeof_struct_geographic_msgs__msg__GeoPose * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GeoPoseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GeoPose__Array_to_Go(goSlice []GeoPose, cSlice []CGeoPose) {
	for i := 0; i < len(cSlice); i++ {
		GeoPoseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GeoPose__Array_to_C(cSlice []CGeoPose, goSlice []GeoPose) {
	for i := 0; i < len(goSlice); i++ {
		GeoPoseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
