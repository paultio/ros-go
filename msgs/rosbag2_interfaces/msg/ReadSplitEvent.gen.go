// Code generated by rclgo-gen. DO NOT EDIT.

package rosbag2_interfaces_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rosbag2_interfaces/msg/read_split_event.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("rosbag2_interfaces/ReadSplitEvent", ReadSplitEventTypeSupport)
	typemap.RegisterMessage("rosbag2_interfaces/msg/ReadSplitEvent", ReadSplitEventTypeSupport)
}

type ReadSplitEvent struct {
	ClosedFile string `yaml:"closed_file"`// The full path of the file that was finished and closed
	OpenedFile string `yaml:"opened_file"`// The full path of the new file that was opened to continue playback
}

// NewReadSplitEvent creates a new ReadSplitEvent with default values.
func NewReadSplitEvent() *ReadSplitEvent {
	self := ReadSplitEvent{}
	self.SetDefaults()
	return &self
}

func (t *ReadSplitEvent) Clone() *ReadSplitEvent {
	c := &ReadSplitEvent{}
	c.ClosedFile = t.ClosedFile
	c.OpenedFile = t.OpenedFile
	return c
}

func (t *ReadSplitEvent) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ReadSplitEvent) SetDefaults() {
	t.ClosedFile = ""
	t.OpenedFile = ""
}

func (t *ReadSplitEvent) GetTypeSupport() types.MessageTypeSupport {
	return ReadSplitEventTypeSupport
}

// ReadSplitEventPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ReadSplitEventPublisher struct {
	*rclgo.Publisher
}

// NewReadSplitEventPublisher creates and returns a new publisher for the
// ReadSplitEvent
func NewReadSplitEventPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ReadSplitEventPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ReadSplitEventTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ReadSplitEventPublisher{pub}, nil
}

func (p *ReadSplitEventPublisher) Publish(msg *ReadSplitEvent) error {
	return p.Publisher.Publish(msg)
}

// ReadSplitEventSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ReadSplitEventSubscription struct {
	*rclgo.Subscription
}

// ReadSplitEventSubscriptionCallback type is used to provide a subscription
// handler function for a ReadSplitEventSubscription.
type ReadSplitEventSubscriptionCallback func(msg *ReadSplitEvent, info *rclgo.MessageInfo, err error)

// NewReadSplitEventSubscription creates and returns a new subscription for the
// ReadSplitEvent
func NewReadSplitEventSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ReadSplitEventSubscriptionCallback) (*ReadSplitEventSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ReadSplitEvent
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ReadSplitEventTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ReadSplitEventSubscription{sub}, nil
}

func (s *ReadSplitEventSubscription) TakeMessage(out *ReadSplitEvent) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneReadSplitEventSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneReadSplitEventSlice(dst, src []ReadSplitEvent) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ReadSplitEventTypeSupport types.MessageTypeSupport = _ReadSplitEventTypeSupport{}

type _ReadSplitEventTypeSupport struct{}

func (t _ReadSplitEventTypeSupport) New() types.Message {
	return NewReadSplitEvent()
}

func (t _ReadSplitEventTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rosbag2_interfaces__msg__ReadSplitEvent
	return (unsafe.Pointer)(C.rosbag2_interfaces__msg__ReadSplitEvent__create())
}

func (t _ReadSplitEventTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rosbag2_interfaces__msg__ReadSplitEvent__destroy((*C.rosbag2_interfaces__msg__ReadSplitEvent)(pointer_to_free))
}

func (t _ReadSplitEventTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ReadSplitEvent)
	mem := (*C.rosbag2_interfaces__msg__ReadSplitEvent)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.closed_file), m.ClosedFile)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.opened_file), m.OpenedFile)
}

func (t _ReadSplitEventTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ReadSplitEvent)
	mem := (*C.rosbag2_interfaces__msg__ReadSplitEvent)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.ClosedFile, unsafe.Pointer(&mem.closed_file))
	primitives.StringAsGoStruct(&m.OpenedFile, unsafe.Pointer(&mem.opened_file))
}

func (t _ReadSplitEventTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rosbag2_interfaces__msg__ReadSplitEvent())
}

type CReadSplitEvent = C.rosbag2_interfaces__msg__ReadSplitEvent
type CReadSplitEvent__Sequence = C.rosbag2_interfaces__msg__ReadSplitEvent__Sequence

func ReadSplitEvent__Sequence_to_Go(goSlice *[]ReadSplitEvent, cSlice CReadSplitEvent__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ReadSplitEvent, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ReadSplitEventTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ReadSplitEvent__Sequence_to_C(cSlice *CReadSplitEvent__Sequence, goSlice []ReadSplitEvent) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rosbag2_interfaces__msg__ReadSplitEvent)(C.malloc(C.sizeof_struct_rosbag2_interfaces__msg__ReadSplitEvent * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ReadSplitEventTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ReadSplitEvent__Array_to_Go(goSlice []ReadSplitEvent, cSlice []CReadSplitEvent) {
	for i := 0; i < len(cSlice); i++ {
		ReadSplitEventTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ReadSplitEvent__Array_to_C(cSlice []CReadSplitEvent, goSlice []ReadSplitEvent) {
	for i := 0; i < len(goSlice); i++ {
		ReadSplitEventTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
