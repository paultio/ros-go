// Code generated by rclgo-gen. DO NOT EDIT.

package rosbag2_interfaces_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rosbag2_interfaces/msg/write_split_event.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("rosbag2_interfaces/WriteSplitEvent", WriteSplitEventTypeSupport)
	typemap.RegisterMessage("rosbag2_interfaces/msg/WriteSplitEvent", WriteSplitEventTypeSupport)
}

type WriteSplitEvent struct {
	ClosedFile string `yaml:"closed_file"`// The full path of the file that was finished and closed
	OpenedFile string `yaml:"opened_file"`// The full path of the new file that was created to continue recording
}

// NewWriteSplitEvent creates a new WriteSplitEvent with default values.
func NewWriteSplitEvent() *WriteSplitEvent {
	self := WriteSplitEvent{}
	self.SetDefaults()
	return &self
}

func (t *WriteSplitEvent) Clone() *WriteSplitEvent {
	c := &WriteSplitEvent{}
	c.ClosedFile = t.ClosedFile
	c.OpenedFile = t.OpenedFile
	return c
}

func (t *WriteSplitEvent) CloneMsg() types.Message {
	return t.Clone()
}

func (t *WriteSplitEvent) SetDefaults() {
	t.ClosedFile = ""
	t.OpenedFile = ""
}

func (t *WriteSplitEvent) GetTypeSupport() types.MessageTypeSupport {
	return WriteSplitEventTypeSupport
}

// WriteSplitEventPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type WriteSplitEventPublisher struct {
	*rclgo.Publisher
}

// NewWriteSplitEventPublisher creates and returns a new publisher for the
// WriteSplitEvent
func NewWriteSplitEventPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*WriteSplitEventPublisher, error) {
	pub, err := node.NewPublisher(topic_name, WriteSplitEventTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &WriteSplitEventPublisher{pub}, nil
}

func (p *WriteSplitEventPublisher) Publish(msg *WriteSplitEvent) error {
	return p.Publisher.Publish(msg)
}

// WriteSplitEventSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type WriteSplitEventSubscription struct {
	*rclgo.Subscription
}

// WriteSplitEventSubscriptionCallback type is used to provide a subscription
// handler function for a WriteSplitEventSubscription.
type WriteSplitEventSubscriptionCallback func(msg *WriteSplitEvent, info *rclgo.MessageInfo, err error)

// NewWriteSplitEventSubscription creates and returns a new subscription for the
// WriteSplitEvent
func NewWriteSplitEventSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback WriteSplitEventSubscriptionCallback) (*WriteSplitEventSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg WriteSplitEvent
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, WriteSplitEventTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &WriteSplitEventSubscription{sub}, nil
}

func (s *WriteSplitEventSubscription) TakeMessage(out *WriteSplitEvent) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneWriteSplitEventSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneWriteSplitEventSlice(dst, src []WriteSplitEvent) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var WriteSplitEventTypeSupport types.MessageTypeSupport = _WriteSplitEventTypeSupport{}

type _WriteSplitEventTypeSupport struct{}

func (t _WriteSplitEventTypeSupport) New() types.Message {
	return NewWriteSplitEvent()
}

func (t _WriteSplitEventTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rosbag2_interfaces__msg__WriteSplitEvent
	return (unsafe.Pointer)(C.rosbag2_interfaces__msg__WriteSplitEvent__create())
}

func (t _WriteSplitEventTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rosbag2_interfaces__msg__WriteSplitEvent__destroy((*C.rosbag2_interfaces__msg__WriteSplitEvent)(pointer_to_free))
}

func (t _WriteSplitEventTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*WriteSplitEvent)
	mem := (*C.rosbag2_interfaces__msg__WriteSplitEvent)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.closed_file), m.ClosedFile)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.opened_file), m.OpenedFile)
}

func (t _WriteSplitEventTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*WriteSplitEvent)
	mem := (*C.rosbag2_interfaces__msg__WriteSplitEvent)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.ClosedFile, unsafe.Pointer(&mem.closed_file))
	primitives.StringAsGoStruct(&m.OpenedFile, unsafe.Pointer(&mem.opened_file))
}

func (t _WriteSplitEventTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rosbag2_interfaces__msg__WriteSplitEvent())
}

type CWriteSplitEvent = C.rosbag2_interfaces__msg__WriteSplitEvent
type CWriteSplitEvent__Sequence = C.rosbag2_interfaces__msg__WriteSplitEvent__Sequence

func WriteSplitEvent__Sequence_to_Go(goSlice *[]WriteSplitEvent, cSlice CWriteSplitEvent__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]WriteSplitEvent, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		WriteSplitEventTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func WriteSplitEvent__Sequence_to_C(cSlice *CWriteSplitEvent__Sequence, goSlice []WriteSplitEvent) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rosbag2_interfaces__msg__WriteSplitEvent)(C.malloc(C.sizeof_struct_rosbag2_interfaces__msg__WriteSplitEvent * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		WriteSplitEventTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func WriteSplitEvent__Array_to_Go(goSlice []WriteSplitEvent, cSlice []CWriteSplitEvent) {
	for i := 0; i < len(cSlice); i++ {
		WriteSplitEventTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func WriteSplitEvent__Array_to_C(cSlice []CWriteSplitEvent, goSlice []WriteSplitEvent) {
	for i := 0; i < len(goSlice); i++ {
		WriteSplitEventTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
