// Code generated by rclgo-gen. DO NOT EDIT.

package rosbag2_interfaces_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <rosbag2_interfaces/srv/get_rate.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("rosbag2_interfaces/GetRate", GetRateTypeSupport)
	typemap.RegisterService("rosbag2_interfaces/srv/GetRate", GetRateTypeSupport)
}

type _GetRateTypeSupport struct {}

func (s _GetRateTypeSupport) Request() types.MessageTypeSupport {
	return GetRate_RequestTypeSupport
}

func (s _GetRateTypeSupport) Response() types.MessageTypeSupport {
	return GetRate_ResponseTypeSupport
}

func (s _GetRateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__rosbag2_interfaces__srv__GetRate())
}

// Modifying this variable is undefined behavior.
var GetRateTypeSupport types.ServiceTypeSupport = _GetRateTypeSupport{}

// GetRateClient wraps rclgo.Client to provide type safe helper
// functions
type GetRateClient struct {
	*rclgo.Client
}

// NewGetRateClient creates and returns a new client for the
// GetRate
func NewGetRateClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*GetRateClient, error) {
	client, err := node.NewClient(serviceName, GetRateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GetRateClient{client}, nil
}

func (s *GetRateClient) Send(ctx context.Context, req *GetRate_Request) (*GetRate_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*GetRate_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type GetRateServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s GetRateServiceResponseSender) SendResponse(resp *GetRate_Response) error {
	return s.sender.SendResponse(resp)
}

type GetRateServiceRequestHandler func(*rclgo.ServiceInfo, *GetRate_Request, GetRateServiceResponseSender)

// GetRateService wraps rclgo.Service to provide type safe helper
// functions
type GetRateService struct {
	*rclgo.Service
}

// NewGetRateService creates and returns a new service for the
// GetRate
func NewGetRateService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler GetRateServiceRequestHandler) (*GetRateService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*GetRate_Request)
		responseSender := GetRateServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, GetRateTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &GetRateService{service}, nil
}