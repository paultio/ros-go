// Code generated by rclgo-gen. DO NOT EDIT.

package rosbag2_interfaces_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <rosbag2_interfaces/srv/toggle_paused.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("rosbag2_interfaces/TogglePaused", TogglePausedTypeSupport)
	typemap.RegisterService("rosbag2_interfaces/srv/TogglePaused", TogglePausedTypeSupport)
}

type _TogglePausedTypeSupport struct {}

func (s _TogglePausedTypeSupport) Request() types.MessageTypeSupport {
	return TogglePaused_RequestTypeSupport
}

func (s _TogglePausedTypeSupport) Response() types.MessageTypeSupport {
	return TogglePaused_ResponseTypeSupport
}

func (s _TogglePausedTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__rosbag2_interfaces__srv__TogglePaused())
}

// Modifying this variable is undefined behavior.
var TogglePausedTypeSupport types.ServiceTypeSupport = _TogglePausedTypeSupport{}

// TogglePausedClient wraps rclgo.Client to provide type safe helper
// functions
type TogglePausedClient struct {
	*rclgo.Client
}

// NewTogglePausedClient creates and returns a new client for the
// TogglePaused
func NewTogglePausedClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*TogglePausedClient, error) {
	client, err := node.NewClient(serviceName, TogglePausedTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TogglePausedClient{client}, nil
}

func (s *TogglePausedClient) Send(ctx context.Context, req *TogglePaused_Request) (*TogglePaused_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*TogglePaused_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type TogglePausedServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s TogglePausedServiceResponseSender) SendResponse(resp *TogglePaused_Response) error {
	return s.sender.SendResponse(resp)
}

type TogglePausedServiceRequestHandler func(*rclgo.ServiceInfo, *TogglePaused_Request, TogglePausedServiceResponseSender)

// TogglePausedService wraps rclgo.Service to provide type safe helper
// functions
type TogglePausedService struct {
	*rclgo.Service
}

// NewTogglePausedService creates and returns a new service for the
// TogglePaused
func NewTogglePausedService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler TogglePausedServiceRequestHandler) (*TogglePausedService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*TogglePaused_Request)
		responseSender := TogglePausedServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, TogglePausedTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &TogglePausedService{service}, nil
}