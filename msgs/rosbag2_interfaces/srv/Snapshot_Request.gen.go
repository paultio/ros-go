// Code generated by rclgo-gen. DO NOT EDIT.

package rosbag2_interfaces_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rosbag2_interfaces/srv/snapshot.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("rosbag2_interfaces/Snapshot_Request", Snapshot_RequestTypeSupport)
	typemap.RegisterMessage("rosbag2_interfaces/srv/Snapshot_Request", Snapshot_RequestTypeSupport)
}

type Snapshot_Request struct {
}

// NewSnapshot_Request creates a new Snapshot_Request with default values.
func NewSnapshot_Request() *Snapshot_Request {
	self := Snapshot_Request{}
	self.SetDefaults()
	return &self
}

func (t *Snapshot_Request) Clone() *Snapshot_Request {
	c := &Snapshot_Request{}
	return c
}

func (t *Snapshot_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Snapshot_Request) SetDefaults() {
}

func (t *Snapshot_Request) GetTypeSupport() types.MessageTypeSupport {
	return Snapshot_RequestTypeSupport
}

// Snapshot_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type Snapshot_RequestPublisher struct {
	*rclgo.Publisher
}

// NewSnapshot_RequestPublisher creates and returns a new publisher for the
// Snapshot_Request
func NewSnapshot_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*Snapshot_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, Snapshot_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &Snapshot_RequestPublisher{pub}, nil
}

func (p *Snapshot_RequestPublisher) Publish(msg *Snapshot_Request) error {
	return p.Publisher.Publish(msg)
}

// Snapshot_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type Snapshot_RequestSubscription struct {
	*rclgo.Subscription
}

// Snapshot_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a Snapshot_RequestSubscription.
type Snapshot_RequestSubscriptionCallback func(msg *Snapshot_Request, info *rclgo.MessageInfo, err error)

// NewSnapshot_RequestSubscription creates and returns a new subscription for the
// Snapshot_Request
func NewSnapshot_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback Snapshot_RequestSubscriptionCallback) (*Snapshot_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Snapshot_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, Snapshot_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &Snapshot_RequestSubscription{sub}, nil
}

func (s *Snapshot_RequestSubscription) TakeMessage(out *Snapshot_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSnapshot_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSnapshot_RequestSlice(dst, src []Snapshot_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var Snapshot_RequestTypeSupport types.MessageTypeSupport = _Snapshot_RequestTypeSupport{}

type _Snapshot_RequestTypeSupport struct{}

func (t _Snapshot_RequestTypeSupport) New() types.Message {
	return NewSnapshot_Request()
}

func (t _Snapshot_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rosbag2_interfaces__srv__Snapshot_Request
	return (unsafe.Pointer)(C.rosbag2_interfaces__srv__Snapshot_Request__create())
}

func (t _Snapshot_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rosbag2_interfaces__srv__Snapshot_Request__destroy((*C.rosbag2_interfaces__srv__Snapshot_Request)(pointer_to_free))
}

func (t _Snapshot_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	
}

func (t _Snapshot_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	
}

func (t _Snapshot_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rosbag2_interfaces__srv__Snapshot_Request())
}

type CSnapshot_Request = C.rosbag2_interfaces__srv__Snapshot_Request
type CSnapshot_Request__Sequence = C.rosbag2_interfaces__srv__Snapshot_Request__Sequence

func Snapshot_Request__Sequence_to_Go(goSlice *[]Snapshot_Request, cSlice CSnapshot_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Snapshot_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		Snapshot_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Snapshot_Request__Sequence_to_C(cSlice *CSnapshot_Request__Sequence, goSlice []Snapshot_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rosbag2_interfaces__srv__Snapshot_Request)(C.malloc(C.sizeof_struct_rosbag2_interfaces__srv__Snapshot_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		Snapshot_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Snapshot_Request__Array_to_Go(goSlice []Snapshot_Request, cSlice []CSnapshot_Request) {
	for i := 0; i < len(cSlice); i++ {
		Snapshot_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Snapshot_Request__Array_to_C(cSlice []CSnapshot_Request, goSlice []Snapshot_Request) {
	for i := 0; i < len(goSlice); i++ {
		Snapshot_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
