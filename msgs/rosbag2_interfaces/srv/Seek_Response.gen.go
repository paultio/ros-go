// Code generated by rclgo-gen. DO NOT EDIT.

package rosbag2_interfaces_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rosbag2_interfaces/srv/seek.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("rosbag2_interfaces/Seek_Response", Seek_ResponseTypeSupport)
	typemap.RegisterMessage("rosbag2_interfaces/srv/Seek_Response", Seek_ResponseTypeSupport)
}

type Seek_Response struct {
	Success bool `yaml:"success"`// return true if valid time in bag duration, and successful seek
}

// NewSeek_Response creates a new Seek_Response with default values.
func NewSeek_Response() *Seek_Response {
	self := Seek_Response{}
	self.SetDefaults()
	return &self
}

func (t *Seek_Response) Clone() *Seek_Response {
	c := &Seek_Response{}
	c.Success = t.Success
	return c
}

func (t *Seek_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Seek_Response) SetDefaults() {
	t.Success = false
}

func (t *Seek_Response) GetTypeSupport() types.MessageTypeSupport {
	return Seek_ResponseTypeSupport
}

// Seek_ResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type Seek_ResponsePublisher struct {
	*rclgo.Publisher
}

// NewSeek_ResponsePublisher creates and returns a new publisher for the
// Seek_Response
func NewSeek_ResponsePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*Seek_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topic_name, Seek_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &Seek_ResponsePublisher{pub}, nil
}

func (p *Seek_ResponsePublisher) Publish(msg *Seek_Response) error {
	return p.Publisher.Publish(msg)
}

// Seek_ResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type Seek_ResponseSubscription struct {
	*rclgo.Subscription
}

// Seek_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a Seek_ResponseSubscription.
type Seek_ResponseSubscriptionCallback func(msg *Seek_Response, info *rclgo.MessageInfo, err error)

// NewSeek_ResponseSubscription creates and returns a new subscription for the
// Seek_Response
func NewSeek_ResponseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback Seek_ResponseSubscriptionCallback) (*Seek_ResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Seek_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, Seek_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &Seek_ResponseSubscription{sub}, nil
}

func (s *Seek_ResponseSubscription) TakeMessage(out *Seek_Response) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSeek_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSeek_ResponseSlice(dst, src []Seek_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var Seek_ResponseTypeSupport types.MessageTypeSupport = _Seek_ResponseTypeSupport{}

type _Seek_ResponseTypeSupport struct{}

func (t _Seek_ResponseTypeSupport) New() types.Message {
	return NewSeek_Response()
}

func (t _Seek_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rosbag2_interfaces__srv__Seek_Response
	return (unsafe.Pointer)(C.rosbag2_interfaces__srv__Seek_Response__create())
}

func (t _Seek_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rosbag2_interfaces__srv__Seek_Response__destroy((*C.rosbag2_interfaces__srv__Seek_Response)(pointer_to_free))
}

func (t _Seek_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Seek_Response)
	mem := (*C.rosbag2_interfaces__srv__Seek_Response)(dst)
	mem.success = C.bool(m.Success)
}

func (t _Seek_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Seek_Response)
	mem := (*C.rosbag2_interfaces__srv__Seek_Response)(ros2_message_buffer)
	m.Success = bool(mem.success)
}

func (t _Seek_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rosbag2_interfaces__srv__Seek_Response())
}

type CSeek_Response = C.rosbag2_interfaces__srv__Seek_Response
type CSeek_Response__Sequence = C.rosbag2_interfaces__srv__Seek_Response__Sequence

func Seek_Response__Sequence_to_Go(goSlice *[]Seek_Response, cSlice CSeek_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Seek_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		Seek_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Seek_Response__Sequence_to_C(cSlice *CSeek_Response__Sequence, goSlice []Seek_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rosbag2_interfaces__srv__Seek_Response)(C.malloc(C.sizeof_struct_rosbag2_interfaces__srv__Seek_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		Seek_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Seek_Response__Array_to_Go(goSlice []Seek_Response, cSlice []CSeek_Response) {
	for i := 0; i < len(cSlice); i++ {
		Seek_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Seek_Response__Array_to_C(cSlice []CSeek_Response, goSlice []Seek_Response) {
	for i := 0; i < len(goSlice); i++ {
		Seek_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
