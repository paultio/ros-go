// Code generated by rclgo-gen. DO NOT EDIT.

package rosbag2_interfaces_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rosbag2_interfaces/srv/toggle_paused.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("rosbag2_interfaces/TogglePaused_Response", TogglePaused_ResponseTypeSupport)
	typemap.RegisterMessage("rosbag2_interfaces/srv/TogglePaused_Response", TogglePaused_ResponseTypeSupport)
}

type TogglePaused_Response struct {
}

// NewTogglePaused_Response creates a new TogglePaused_Response with default values.
func NewTogglePaused_Response() *TogglePaused_Response {
	self := TogglePaused_Response{}
	self.SetDefaults()
	return &self
}

func (t *TogglePaused_Response) Clone() *TogglePaused_Response {
	c := &TogglePaused_Response{}
	return c
}

func (t *TogglePaused_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *TogglePaused_Response) SetDefaults() {
}

func (t *TogglePaused_Response) GetTypeSupport() types.MessageTypeSupport {
	return TogglePaused_ResponseTypeSupport
}

// TogglePaused_ResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type TogglePaused_ResponsePublisher struct {
	*rclgo.Publisher
}

// NewTogglePaused_ResponsePublisher creates and returns a new publisher for the
// TogglePaused_Response
func NewTogglePaused_ResponsePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*TogglePaused_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topic_name, TogglePaused_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TogglePaused_ResponsePublisher{pub}, nil
}

func (p *TogglePaused_ResponsePublisher) Publish(msg *TogglePaused_Response) error {
	return p.Publisher.Publish(msg)
}

// TogglePaused_ResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type TogglePaused_ResponseSubscription struct {
	*rclgo.Subscription
}

// TogglePaused_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a TogglePaused_ResponseSubscription.
type TogglePaused_ResponseSubscriptionCallback func(msg *TogglePaused_Response, info *rclgo.MessageInfo, err error)

// NewTogglePaused_ResponseSubscription creates and returns a new subscription for the
// TogglePaused_Response
func NewTogglePaused_ResponseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback TogglePaused_ResponseSubscriptionCallback) (*TogglePaused_ResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg TogglePaused_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, TogglePaused_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TogglePaused_ResponseSubscription{sub}, nil
}

func (s *TogglePaused_ResponseSubscription) TakeMessage(out *TogglePaused_Response) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTogglePaused_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTogglePaused_ResponseSlice(dst, src []TogglePaused_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TogglePaused_ResponseTypeSupport types.MessageTypeSupport = _TogglePaused_ResponseTypeSupport{}

type _TogglePaused_ResponseTypeSupport struct{}

func (t _TogglePaused_ResponseTypeSupport) New() types.Message {
	return NewTogglePaused_Response()
}

func (t _TogglePaused_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rosbag2_interfaces__srv__TogglePaused_Response
	return (unsafe.Pointer)(C.rosbag2_interfaces__srv__TogglePaused_Response__create())
}

func (t _TogglePaused_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rosbag2_interfaces__srv__TogglePaused_Response__destroy((*C.rosbag2_interfaces__srv__TogglePaused_Response)(pointer_to_free))
}

func (t _TogglePaused_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	
}

func (t _TogglePaused_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	
}

func (t _TogglePaused_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rosbag2_interfaces__srv__TogglePaused_Response())
}

type CTogglePaused_Response = C.rosbag2_interfaces__srv__TogglePaused_Response
type CTogglePaused_Response__Sequence = C.rosbag2_interfaces__srv__TogglePaused_Response__Sequence

func TogglePaused_Response__Sequence_to_Go(goSlice *[]TogglePaused_Response, cSlice CTogglePaused_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TogglePaused_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TogglePaused_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func TogglePaused_Response__Sequence_to_C(cSlice *CTogglePaused_Response__Sequence, goSlice []TogglePaused_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rosbag2_interfaces__srv__TogglePaused_Response)(C.malloc(C.sizeof_struct_rosbag2_interfaces__srv__TogglePaused_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TogglePaused_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func TogglePaused_Response__Array_to_Go(goSlice []TogglePaused_Response, cSlice []CTogglePaused_Response) {
	for i := 0; i < len(cSlice); i++ {
		TogglePaused_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func TogglePaused_Response__Array_to_C(cSlice []CTogglePaused_Response, goSlice []TogglePaused_Response) {
	for i := 0; i < len(goSlice); i++ {
		TogglePaused_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
