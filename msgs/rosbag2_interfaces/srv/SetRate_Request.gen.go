// Code generated by rclgo-gen. DO NOT EDIT.

package rosbag2_interfaces_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rosbag2_interfaces/srv/set_rate.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("rosbag2_interfaces/SetRate_Request", SetRate_RequestTypeSupport)
	typemap.RegisterMessage("rosbag2_interfaces/srv/SetRate_Request", SetRate_RequestTypeSupport)
}

type SetRate_Request struct {
	Rate float64 `yaml:"rate"`
}

// NewSetRate_Request creates a new SetRate_Request with default values.
func NewSetRate_Request() *SetRate_Request {
	self := SetRate_Request{}
	self.SetDefaults()
	return &self
}

func (t *SetRate_Request) Clone() *SetRate_Request {
	c := &SetRate_Request{}
	c.Rate = t.Rate
	return c
}

func (t *SetRate_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SetRate_Request) SetDefaults() {
	t.Rate = 0
}

func (t *SetRate_Request) GetTypeSupport() types.MessageTypeSupport {
	return SetRate_RequestTypeSupport
}

// SetRate_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SetRate_RequestPublisher struct {
	*rclgo.Publisher
}

// NewSetRate_RequestPublisher creates and returns a new publisher for the
// SetRate_Request
func NewSetRate_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SetRate_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, SetRate_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetRate_RequestPublisher{pub}, nil
}

func (p *SetRate_RequestPublisher) Publish(msg *SetRate_Request) error {
	return p.Publisher.Publish(msg)
}

// SetRate_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SetRate_RequestSubscription struct {
	*rclgo.Subscription
}

// SetRate_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a SetRate_RequestSubscription.
type SetRate_RequestSubscriptionCallback func(msg *SetRate_Request, info *rclgo.MessageInfo, err error)

// NewSetRate_RequestSubscription creates and returns a new subscription for the
// SetRate_Request
func NewSetRate_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SetRate_RequestSubscriptionCallback) (*SetRate_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SetRate_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SetRate_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SetRate_RequestSubscription{sub}, nil
}

func (s *SetRate_RequestSubscription) TakeMessage(out *SetRate_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSetRate_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSetRate_RequestSlice(dst, src []SetRate_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SetRate_RequestTypeSupport types.MessageTypeSupport = _SetRate_RequestTypeSupport{}

type _SetRate_RequestTypeSupport struct{}

func (t _SetRate_RequestTypeSupport) New() types.Message {
	return NewSetRate_Request()
}

func (t _SetRate_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rosbag2_interfaces__srv__SetRate_Request
	return (unsafe.Pointer)(C.rosbag2_interfaces__srv__SetRate_Request__create())
}

func (t _SetRate_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rosbag2_interfaces__srv__SetRate_Request__destroy((*C.rosbag2_interfaces__srv__SetRate_Request)(pointer_to_free))
}

func (t _SetRate_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SetRate_Request)
	mem := (*C.rosbag2_interfaces__srv__SetRate_Request)(dst)
	mem.rate = C.double(m.Rate)
}

func (t _SetRate_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SetRate_Request)
	mem := (*C.rosbag2_interfaces__srv__SetRate_Request)(ros2_message_buffer)
	m.Rate = float64(mem.rate)
}

func (t _SetRate_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rosbag2_interfaces__srv__SetRate_Request())
}

type CSetRate_Request = C.rosbag2_interfaces__srv__SetRate_Request
type CSetRate_Request__Sequence = C.rosbag2_interfaces__srv__SetRate_Request__Sequence

func SetRate_Request__Sequence_to_Go(goSlice *[]SetRate_Request, cSlice CSetRate_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SetRate_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SetRate_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SetRate_Request__Sequence_to_C(cSlice *CSetRate_Request__Sequence, goSlice []SetRate_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rosbag2_interfaces__srv__SetRate_Request)(C.malloc(C.sizeof_struct_rosbag2_interfaces__srv__SetRate_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SetRate_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SetRate_Request__Array_to_Go(goSlice []SetRate_Request, cSlice []CSetRate_Request) {
	for i := 0; i < len(cSlice); i++ {
		SetRate_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SetRate_Request__Array_to_C(cSlice []CSetRate_Request, goSlice []SetRate_Request) {
	for i := 0; i < len(goSlice); i++ {
		SetRate_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
